from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from PIL import Image
import numpy as np
import io
import base64
from IPython.display import display, HTML


# Define image size
IMG_SIZE = (224, 224)
DISPLAY_WIDTH = 150  # Adjust this value to set the desired width of the displayed images


# Load MobileNetV2 model pre-trained on ImageNet
base_model = MobileNetV2(weights='imagenet', include_top=False)
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)
model = Model(inputs=base_model.input, outputs=predictions)


# Initialize empty lists for healthy and unhealthy images
healthy_images = []
unhealthy_images = []


# Counters for accuracy calculation
total_images = 0
correct_predictions = 0


# Function to handle file selection
def handle_file_selection(files):
    global total_images, correct_predictions
    for file in files:
        # Get the image data directly
        img_data = files[file]


        # Pre-process the image
        img = Image.open(io.BytesIO(img_data))
        img = img.resize(IMG_SIZE)  # Resize to match model input size
        img = image.img_to_array(img)
        img = preprocess_input(img)
        img = np.expand_dims(img, axis=0)


        # Predict the health of the banana leaf
        prediction = model.predict(img)[0][0]


        # Classify the image based on prediction
        label = "Healthy" if prediction > 0.5 else "Unhealthy"


        # Increment counters
        total_images += 1
        if (label == "Healthy" and "healthy" in file.lower()) or (label == "Unhealthy" and "unhealthy" in file.lower()):
            correct_predictions += 1


        # Append the file name, label, prediction, and image to the corresponding list
        if label == "Healthy":
            healthy_images.append((file, img_data, prediction))
        else:
            unhealthy_images.append((file, img_data, prediction))


# Use a simple file selection widget
from google.colab import files


uploaded = files.upload()


# Process selected files
for filename in uploaded.keys():
    handle_file_selection({filename: uploaded[filename]})  # Pass a dictionary with filename and content


# Display results
html_output = "<h2>Healthy Banana Leaves:</h2>"
for image_info in healthy_images:
    # Display image using HTML representation under the Healthy section
    encoded_image = base64.b64encode(image_info[1]).decode("utf-8")
    prediction = image_info[2]
    html_output += (
        f"<img src='data:image/webp;base64,{encoded_image}' style='width:{DISPLAY_WIDTH}px;' /> "
        f"<span style='font-size:12px;'>Prediction: {prediction:.2f}</span><br>"
    )


html_output += f"<h2>Unhealthy Banana Leaves (Accuracy: {correct_predictions/total_images*100:.2f}%):</h2>"
for image_info in unhealthy_images:
    # Display image using HTML representation under the Unhealthy section
    encoded_image = base64.b64encode(image_info[1]).decode("utf-8")
    prediction = image_info[2]
    html_output += (
        f"<img src='data:image/webp;base64,{encoded_image}' style='width:{DISPLAY_WIDTH}px;' /> "
        f"<span style='font-size:12px;'>Prediction: {prediction:.2f}</span><br>"
    )


# Display the HTML output
display(HTML(html_output))
